openapi: 3.0.0
info:
  title: SpazzaTN API
  version: 1.0.0
paths:
  /newgroup:
    post:
      summary: Create a new group
      description: >-
        Create a new group with the provided user as the founder and
        participant.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user creating the group.
              example:
                email: john@example.com
      responses:
        '200':
          description: The created group object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '500':
          description: Internal server error.
        '501':
          description: Error saving the group.
  /addparticipant:
    post:
      summary: Add a participant to a group
      description: Add a participant to an existing group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  description: The ID of the group.
                userId:
                  type: string
                  description: The ID of the user to add as a participant.
              example:
                groupId: 1234567890
                userId: abcdefghij
      responses:
        '200':
          description: The updated group object.
          content:
            application/json:
              schema:
                $ref: '#/models/gruppo'
        '404':
          description: Group not found.
        '500':
          description: Internal server error.
  /:
    get:
      summary: Retrieve a list of users
      description: >-
        Retrieve a list of users. If an email is provided as a query parameter,
        retrieve the user with that email.
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: false
          description: The email of the user to retrieve.
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    self:
                      type: string
                      description: The URL of the user.
                    email:
                      type: string
                      description: The email of the user.
  /register:
    post:
      summary: Register a new user
      description: 'Register a new user by providing an email, password, and username.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  description: The user's email.
                password:
                  type: string
                  description: The user's password.
                username:
                  type: string
                  description: The user's username.
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
        '400':
          description: 'The field "email" must be a non-empty string, in email format.'
        '409':
          description: The email is already in use.
        '500':
          description: Error saving user.
components: {}
tags: []
